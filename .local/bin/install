#!/usr/bin/env bash

# This script sets up a development environment for a Linux-based system.
# It installs and configures various tools, packages, and configurations
# necessary for a comfortable and efficient development experience.
# Written by: https://github.com/linkinlog

# Exit if anything fails (has an exit code of 1)
set -e

# Set arguments
readonly HOSTNAME="$1"
readonly GIT_EMAIL="$2"
readonly GIT_USER="$3"
readonly GH_PERSONAL_TOKEN="$4"

## Tools
readonly TOOLS=("ssh" "gh" "git" "xclip" "docker" "ripgrep" "tmux" "zsh" "brave-browser" "i3")
readonly DEPS=("ninja-build" "gettext" "libtool-bin" "cmake" "g++" "pkg-config" "unzip" "curl" "python3" "python3-pip" "bsdutils" "cmake" "dpkg-dev" "fakeroot" "gcc" "g++" "libegl1-mesa-dev" "libssl-dev" "libfontconfig1-dev" "libwayland-dev" "libx11-xcb-dev" "libxcb-ewmh-dev" "libxcb-icccm4-dev" "libxcb-image0-dev" "libxcb-keysyms1-dev" "libxcb-randr0-dev" "libxcb-render0-dev" "libxcb-xkb-dev" "libxkbcommon-dev" "libxkbcommon-x11-dev" "libxcb-util0-dev" "lsb-release" "python3" "xdg-utils" "xorg-dev")

validate() {
    if [ "$HOSTNAME" = "" ] || [ "$GIT_EMAIL" = "" ] || [ "$GIT_USER" = "" ] || [ "$GH_PERSONAL_TOKEN" = "" ]; then
        echo "Usage: $0 <hostname> <git_email> <git_user> <gh_personal_token>"
        exit 1
    fi

}

# Since we use curl, might be good to double check for it
# Even though we are including it in the deps
check_curl() {
    if ! command -v curl >/dev/null 2>&1; then
        printf "Error: curl command not found. Please install curl and try again.\n"
        exit 1
    fi
}


refresh_sudo() {
    printf "Refreshing sudo authentication"
    sudo -v
}

install_packages() {
    local package_manager
    local package_list=("$@")

    if command -v apt-get >/dev/null 2>&1; then
        package_manager="apt-get"
        sudo apt-get update -q
    elif command -v dnf >/dev/null 2>&1; then
        package_manager="dnf"
    elif command -v pacman >/dev/null 2>&1; then
        package_manager="pacman"
        sudo pacman -Sy
    elif command -v zypper >/dev/null 2>&1; then
        package_manager="zypper"
        sudo zypper refresh
    else
        printf "No supported package manager found.\n"
        exit 1
    fi

    printf "Using %s as package manager and installing...\n" "$package_manager"
    sudo "$package_manager" -qy install "${package_list[@]}"
}

add_brave_repo() {
    ## Setting up brave gpg key
    sudo wget -O /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main"|sudo tee /etc/apt/sources.list.d/brave-browser-release.list
    sudo apt update
}

install_rust() {
    check_curl
    curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal --default-toolchain stable -y
    # Add Rust to PATH (taken from .cargo/env)
    case ":${PATH}:" in
        *:"$HOME/.cargo/bin":*)
            ;;
        *)
            # Prepending path in case a system-installed rustc needs to be overridden
            export PATH="$HOME/.cargo/bin:$PATH"
            ;;
    esac
}

install_rust_tools() {
    if ! command -v cargo >/dev/null 2>&1; then
        printf "Cargo not found...exiting"
        exit 1
    else
        cargo install tree-sitter-cli
        printf "tree-sitter-cli installed \n"
    fi
}

install_wezterm() {
    local wezterm_version
    wezterm_version=$(curl -s "https://api.github.com/repos/wez/wezterm/releases/latest" | grep -Po '"tag_name": "\K[^"]*')
    printf "Installing WezTerm version %s...\n" "$wezterm_version"

    cd
    curl -LO "https://github.com/wez/wezterm/releases/download/${wezterm_version}/wezterm-${wezterm_version}-src.tar.gz"
    tar -xzf "wezterm-${wezterm_version}-src.tar.gz"
    cd "wezterm-${wezterm_version}"
    ./get-deps
    cargo build --release
}

install_go() {
    local go_version="1.20.2"
    printf "Installing Go version %s" "$go_version"
    cd
    wget "https://go.dev/dl/go${go_version}.linux-amd64.tar.gz"
    rm -rf /usr/local/go && sudo tar -C /usr/local -xzf "go${go_version}.linux-amd64.tar.gz"
    export PATH="$PATH:/usr/local/go/bin"
}

install_go_tools() {
    if command -v go >/dev/null 2>&1; then
        local go_tools=(
        "github.com/davidrjenni/reftools/cmd/fillstruct@latest"
        "github.com/go-delve/delve/cmd/dlv@latest"
        "github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
        "github.com/uber/go-torch@latest"
        "github.com/fatih/gomodifytags@latest"
        "github.com/josharian/impl@latest"
        "github.com/golang/mock/mockgen@latest"
        "github.com/onsi/ginkgo/ginkgo@latest"
        "github.com/cweill/gotests/gotests@latest"
        "github.com/rogpeppe/godef@latest"
        "github.com/godoctor/godoctor@latest"
        "github.com/segmentio/golines@latest"
        "github.com/alvaroloes/enumer@latest"
        "golang.org/x/tools/cmd/goimports@latest"
        "golang.org/x/tools/cmd/gorename@latest"
        "golang.org/x/tools/cmd/guru@latest"
        "mvdan.cc/gofumpt@latest"
    )

    for tool in "${go_tools[@]}"; do
        GO111MODULE=on go install "$tool"
    done
    fi
}

install_terminal_tools() {
    local packer_repo="https://github.com/wbthomason/packer.nvim"
    local packer_dir="$HOME/.local/share/nvim/site/pack/packer/start/packer.neovim"
    local tpm_repo="https://github.com/tmux-plugins/tpm"
    local tpm_dir="$HOME/.tmux/plugins/tpm"

    if [ -d "$packer_dir" ]; then
        git -C "$packer_dir" pull
    else
        git clone --depth 1 "$packer_repo" "$packer_dir"
    fi

    if [ -d "$tpm_dir" ]; then
        git -C "$tpm_dir" pull
    else
        git clone "$tpm_repo" "$tpm_dir"
    fi

    printf "Packer and TPM should be installed! Be sure to run :PackerSync and <prefix>+I to install each respectively \n"
}

install_lazygit() {
    cd
    LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
    curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
    tar xf lazygit.tar.gz lazygit
    sudo install lazygit /usr/local/bin
    printf "Installed Lazygit \n"
}

install_lazydocker() {
    check_curl
    cd
    if curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash; then
        printf "Installed Lazydocker \n"
    else
        printf "Error: Failed to install Lazydocker\n"
    fi
}

install_neovim() {
    cd
    git clone https://github.com/neovim/neovim
    cd neovim && make CMAKE_BUILD_TYPE=RelWithDebInfo
    sudo make install
    printf "Installed neovim \n"
}

install_neovim_tools() {
    if ! command -v pip3 >/dev/null 2>&1; then
        printf "Pip3 not found...exiting"
        exit 1
    else
        pip3 install neovim
        printf "Installed python-neovim \n"
    fi
}

set_hostname() {
    if [ "$HOSTNAME" != "" ]; then
        sudo su -c "echo '$HOSTNAME' > /etc/hostname"
        export HOST=$HOSTNAME
        printf "Hostname set to %s \n" "$HOSTNAME"
    fi
}

config_git() {
    git config --global user.email "$GIT_EMAIL"
    git config --global user.name "$GIT_USER"
    printf "Git configured to use %s as email and %s as user \n" "$GIT_EMAIL" "$GIT_USER"
}

start_enable_ssh() {
    sudo systemctl start ssh
    sudo systemctl enable ssh
    printf "SSH started and enabled"
}

setup_github() {
    printf "Setting up GitHub...\n"
    printf "Adding Token %s" "$GH_PERSONAL_TOKEN"

    gh auth login --with-token <<< "$GH_PERSONAL_TOKEN"

    # Make new ssh key for gh
    printf "Creating ssh key for GitHub for %s...\n" "$HOST"
    ssh-keygen -f ~/.ssh/github -N ""

    gh ssh-key add "$HOME/.ssh/github.pub" --title "$HOST"
}

setup_git_repo() {
    printf "Setting up Git repo"
    git clone --bare https://github.com/linkinlog/.dotfiles "$HOME/.dotfiles"
    git --git-dir="$HOME/.dotfiles" --work-tree="$HOME" checkout
    printf "Setting up bare repo's submodules"
    git --git-dir="$HOME/.dotfiles/" --work-tree="$HOME" submodule update --init --remote
}

setup_ohmyzsh() {
    printf "Setting up OhMyZsh\n"

    if [ ! -d "$HOME/.oh-my-zsh" ]; then
        check_curl
        export RUNZSH=no
        export KEEP_ZSHRC=yes
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" \
            "" --unattended && chsh -s "$(which zsh)"
    else
        git -C "$HOME/.oh-my-zsh" pull
    fi

    local zsh_syntax_highlighting_path="${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting"
    if [ -d "$zsh_syntax_highlighting_path" ]; then
        git -C "$zsh_syntax_highlighting_path" pull
    else
        git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$zsh_syntax_highlighting_path"
    fi

    local zsh_autosuggestions_path="${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions"
    if [ -d "$zsh_autosuggestions_path" ]; then
        git -C "$zsh_autosuggestions_path" pull
    else
        git clone https://github.com/zsh-users/zsh-autosuggestions "$zsh_autosuggestions_path"
    fi
}

setup_deps() {
    validate
    refresh_sudo
    add_brave_repo
    install_packages "${DEPS[@]}" "${TOOLS[@]}"
}

setup_env() {
    set_hostname
    config_git
    start_enable_ssh
    install_go
    install_go_tools
    install_lazydocker
    install_lazygit
    install_neovim
    install_neovim_tools
    install_rust
    install_rust_tools
    install_wezterm
    install_terminal_tools
    setup_github
    setup_git_repo
    setup_ohmyzsh
}

main() {
    setup_deps
    setup_env
}

main "$@"
